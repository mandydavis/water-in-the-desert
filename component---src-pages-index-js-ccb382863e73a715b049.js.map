{"version":3,"sources":["webpack:///./src/components/postCard.js","webpack:///./src/pages/index.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/layout.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js"],"names":["postCard","props","react_default","a","createElement","className","count","postClass","node","frontmatter","thumbnail","style","backgroundImage","childImageSharp","fluid","src","gatsby_browser_entry","to","fields","slug","title","BlogIndex","_ref","location","data","siteTitle","site","siteMetadata","posts","allMarkdownRemark","edges","postCounter","layout","seo","keywords","description","map","_ref2","key","__webpack_exports__","query","render","pages_BlogIndex","Object","assign","_3399224544","m","module","exports","require","default","__webpack_require__","d","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","React","createContext","Consumer","staticQueryData","children","propTypes","PropTypes","object","string","isRequired","func","gatsby__WEBPACK_IMPORTED_MODULE_1__","Layout","_React$useState","useState","toggleNav","id","Date","getFullYear","href","target","rel","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","pathname","InternalPageRenderer","json","shape","SEO","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_0__","metaDescription","react__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps","arrayOf"],"mappings":"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","file":"component---src-pages-index-js-ccb382863e73a715b049.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nexport default props => (\n  <article\n    className={`post-card ${props.count % 3 === 0 && `post-card-large`} ${\n      props.postClass\n    } ${props.node.frontmatter.thumbnail ? `with-image` : `no-image`}`}\n    style={\n      props.node.frontmatter.thumbnail && {\n        backgroundImage: `url(${\n          props.node.frontmatter.thumbnail.childImageSharp.fluid.src\n        })`,\n      }\n    }\n  >\n    <Link to={props.node.fields.slug} className=\"post-card-link\">\n      <div className=\"post-card-content\">\n        <h2 className=\"post-card-title\">\n          {props.node.frontmatter.title || props.node.fields.slug}\n        </h2>\n      </div>\n    </Link>\n  </article>\n)\n","import React from \"react\"\nimport { graphql, StaticQuery } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostCard from \"../components/postCard\"\n\n// import \"../utils/global.scss\"\nimport \"../utils/normalize.css\"\nimport \"../utils/css/screen.css\"\n//TODO: switch to staticQuery, get rid of comments, remove unnecessary components, export as draft template\nconst BlogIndex = ({ data }, location) => {\n  const siteTitle = data.site.siteMetadata.title\n  const posts = data.allMarkdownRemark.edges\n  let postCounter = 0\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO\n        title=\"All posts\"\n        keywords={[`blog`, `gatsby`, `javascript`, `react`]}\n      />\n      {/* <Bio /> */}\n      {data.site.siteMetadata.description && (\n        <header className=\"page-head\">\n          <h2 className=\"page-head-title\">\n            {data.site.siteMetadata.description}\n          </h2>\n        </header>\n      )}\n      <div className=\"post-feed\">\n        {posts.map(({ node }) => {\n          postCounter++\n          return (\n            <PostCard\n              key={node.fields.slug}\n              count={postCounter}\n              node={node}\n              postClass={`post`}\n            />\n          )\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nconst indexQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\n      edges {\n        node {\n          excerpt\n          fields {\n            slug\n          }\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            description\n            thumbnail {\n              childImageSharp {\n                fluid(maxWidth: 1360) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default props => (\n  <StaticQuery\n    query={indexQuery}\n    render={data => (\n      <BlogIndex location={props.location} props data={data} {...props} />\n    )}\n  />\n)\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = props => {\n  const { title, children } = props\n  const [toggleNav, setToggleNav] = React.useState(false)\n  return (\n    <div className={`site-wrapper ${toggleNav ? `site-head-open` : ``}`}>\n      <header className=\"site-head\">\n        <div className=\"site-head-container\">\n          <div className=\"site-head-center\">\n            <Link className=\"site-head-logo\" to={`/`}>\n              {title}\n            </Link>\n          </div>\n          <div className=\"site-head-right\">\n          </div>\n        </div>\n      </header>\n      <main id=\"site-main\" className=\"site-main\">\n        <div id=\"swup\" className=\"transition-fade\">\n          {children}\n        </div>\n      </main>\n      <footer className=\"site-foot\">\n        &copy; {new Date().getFullYear()} <Link to={`/`}>{title}</Link> &mdash;\n        Built with{\" \"}\n        <a\n          href=\"https://gatsbyjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Gatsby\n        </a>\n      </footer>\n    </div>\n  )\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}